{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOhUgkgb0nPEvkiPZBUfnc/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pallaviii12/pallaviii12/blob/main/week3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9d0heI2tXCfW",
        "outputId": "2f2b38d4-bb47-40a3-979b-b82d6c0835e7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ],
      "source": [
        "#Create a function that takes three arguments a, b, c and returns the sum of thenumbers that are evenly divided by c from the range a, b inclusive.\n",
        "def check(s):\n",
        "  abc=eval(s)\n",
        "  if abc:\n",
        "    return True\n",
        "  else:\n",
        "    return False\n",
        "print(check(\"1<3<11\"))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a function that returns True if a given inequality expression is correct and False otherwise.\n",
        "def sumDivisibles(A,B,C):\n",
        "  sum = 0\n",
        "  for i in range(A,B+1):\n",
        "    if (i % C==0):\n",
        "      sum+=i\n",
        "  return sum\n",
        "A=int(input(\"Enter value of A=\"))\n",
        "B=int(input(\"Enter value of B=\"))\n",
        "C=int(input(\"Enter value of C=\"))\n",
        "print(sumDivisibles(A,B,C))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3JvYeDqlYTbZ",
        "outputId": "0f7f0871-ecb0-47af-aa99-89769188445d"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter value of A=23\n",
            "Enter value of B=45\n",
            "Enter value of C=55\n",
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a function that replaces all the vowels in a string with a specified character.\n",
        "def replaceVowels(str,K):\n",
        "  vowels='AEIOUaeiou'\n",
        "  for i in vowels:\n",
        "    str=str.replace(i,K) \n",
        "  return str \n",
        "input=\"Apple\"\n",
        "K=\"*\"\n",
        "print(\"Given String:\",input)\n",
        "print(\"Given Specified Character:\",K)\n",
        "print(\"After replacing vowels with the specified character:\",replaceVowels(input,K))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G4m0f2EGZ9ia",
        "outputId": "4a4bc848-75de-490e-cb5e-0fb7babe51aa"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Given String: Apple\n",
            "Given Specified Character: *\n",
            "After replacing vowels with the specified character: *ppl*\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Write a function that calculates the factorial of a number recursively.\n",
        "def factorial(n):\n",
        "  if(n==1 or n==0):\n",
        "    return 1\n",
        "  else:\n",
        "    return(n*factorial(n-1))\n",
        "num = 8\n",
        "print(\"number:\",num)\n",
        "print(\"factorial:\",factorial(num))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "odgkF3TocHF3",
        "outputId": "694955ad-691d-4ebb-b674-5ab0b53a2ac2"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "number: 8\n",
            "factorial: 40320\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Hamming distance is the number of characters that differ between two strings.\n",
        "def hammingDist(str1,str2):\n",
        "  i=0\n",
        "  count=0\n",
        "  while(i<len(str1)):\n",
        "    if(str1[i] !=str2[i]):\n",
        "      count+=1\n",
        "    i+=1\n",
        "  return count  \n",
        "str1=\"strong\"\n",
        "str2=\"strung\"\n",
        "print(hammingDist(str1,str2))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7vZxIAEJdCNZ",
        "outputId": "e53a178f-5293-49f2-9886-707c3c908c52"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Section B(18)"
      ],
      "metadata": {
        "id": "PTP5xxL0fAwH"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a function that takes a list of non-negative integers and strings and return a new listwithout the strings.\n",
        "def filter_list(l):\n",
        "  output = []\n",
        "  for i in l:\n",
        "    if type(i)!=str:\n",
        "      output.append(i)\n",
        "  return output \n",
        "print(filter_list([18,55,'p','d',99,76,'h']))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tm9akp79fAw-",
        "outputId": "af8d9714-f857-4751-96e9-d0081ee9e23b"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[18, 55, 99, 76]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# The &quot;Reverser&quot; takes a string as input and returns that string in reverse order, with theopposite case.\n",
        "def reverse(str):\n",
        "    str = str[::-1]\n",
        "    return str.swapcase()\n",
        "\n",
        "reverse('Hello World')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "H7wZsnSTh28-",
        "outputId": "deca42c0-c391-4597-b536-3cc194ae58b0"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'DLROw OLLEh'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#with middle being everything in between the first and last element.\n",
        "test_list = [1, 4, 5, 6, 7, 8, 9, 12]\n",
        "  \n",
        "# printing the original list\n",
        "print (\"The original list is : \" + str(test_list))\n",
        "  \n",
        "# using list slicing and \"+\" operator\n",
        "# shift last element to first\n",
        "test_list = test_list[-1:] + test_list[:-1] \n",
        "  \n",
        "# printing result\n",
        "print (\"The list after shift is : \" + str(test_list))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OHPe4w8Qh2-2",
        "outputId": "5b764c26-b932-4f40-ce9d-0892628f166b"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The original list is : [1, 4, 5, 6, 7, 8, 9, 12]\n",
            "The list after shift is : [12, 1, 4, 5, 6, 7, 8, 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Write a function that moves all elements of one type to the end of the list.\n",
        "def move_end(array, toMove):\n",
        "    i = 0\n",
        "    s = len(array) - 1\n",
        "    while (i < s):\n",
        "        while (i < s and array[s] == toMove):\n",
        "            s-=1\n",
        "  \n",
        "        if (array[i] == toMove):\n",
        "            array[i], array[s] = array[s] , array[i]\n",
        "        i += 1\n",
        "    return array\n",
        "\n",
        "arr = ['a', 'b', 'b', 'a']\n",
        "k = 'a'\n",
        "ans = move_end(arr, k)\n",
        "for i in range(len(arr)):\n",
        "    print(ans[i] ,end= \" \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UyNOn59sjDiG",
        "outputId": "ae784fe8-147b-45a8-eab3-1822483652d2"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "b b a a "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "SECTION C"
      ],
      "metadata": {
        "id": "MfId9E1RjHSt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a function that takes a string and returns a string in which each character is repeated once.\n",
        "def double(str):\n",
        "    return ''.join([c+c for c in str])\n",
        "\n",
        "print(double('String'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3d4Jt1UwjQav",
        "outputId": "4562ccb9-f66f-4578-96a2-506ec05eec03"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SSttrriinngg\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a function that reverses a boolean value and returns the string \"boolean expected\" if another variable type is given.\n",
        "def reverse(arg=None):\n",
        "    return not arg if type(arg) == bool else \"boolean expected\"\n",
        "\n",
        "print(reverse(True))\n",
        "print(reverse(False))\n",
        "print(reverse(0))\n",
        "print(reverse(None))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E8EguN5cjUc2",
        "outputId": "0a8eb549-f239-4ea5-b85b-5ef8b0a41210"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "True\n",
            "boolean expected\n",
            "boolean expected\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a function that returns the thickness (in meters) of a piece of paper after folding it n number of times. The paper starts off with a thickness of 0.5mm.\n",
        "def layers(n):\n",
        "    thickness = 6.0\n",
        "    for _ in range(n):\n",
        "        thickness *= 2\n",
        "    return str(thickness / 1000)+'m' # for meters\n",
        "\n",
        "print(layers(1))\n",
        "print(layers(4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yLgp9NHajbBW",
        "outputId": "d894a8dd-75da-4a7d-f8ae-60d3bdafad4e"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.012m\n",
            "0.096m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a function that takes a single string as argument and returns an ordered list containing the indices of all capital letters in the string\n",
        "def index_of_cap(word):\n",
        "    indices = []\n",
        "    for i in range(len(word)):\n",
        "        if word[i].isupper():\n",
        "             indices.append(i)\n",
        "    return indices\n",
        "\n",
        "print(index_of_cap('ABC'))\n",
        "print(index_of_cap('eDaBiT'))\n",
        "print(index_of_cap('eQuINoX'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TS0Ku4C6js4l",
        "outputId": "64f2b8d3-270f-4223-d384-5e2f995065f2"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 1, 2]\n",
            "[1, 3, 5]\n",
            "[1, 3, 4, 6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Using list comprehensions, create a function that finds all even numbers from 1 to the given number.\n",
        "list1 = [10, 21, 4, 45, 66, 93]\n",
        " \n",
        "# iterating each number in list\n",
        "for num in list1:\n",
        " \n",
        "    # checking condition\n",
        "    if num % 2 == 0:\n",
        "        print(num, end=\" \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZH56K7M8js5x",
        "outputId": "315205c3-37fe-4be4-dab7-96e9c594e33f"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 4 66 "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Section D"
      ],
      "metadata": {
        "id": "fIOgGhlumVSW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a function that takes a list of strings and integers, and filters out the list so that it returns a list of integers only\n",
        "def filter_list(lst):\n",
        "    intlst = []\n",
        "    for i in lst:\n",
        "        if type(i) == int:\n",
        "            intlst.append(i)\n",
        "    return intlst \n",
        "\n",
        "filter_list([1, 2, 3, 'a', 'b', 4])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u8DKuJsqmVTV",
        "outputId": "cec37178-5ac5-43db-9a48-a51d6175f575"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 2, 3, 4]"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Given a list of numbers, create a function which returns the list but with each element's index in the list added to itself.\n",
        "def add_index(lst):\n",
        "    ind = 0\n",
        "    index = []\n",
        "    for i in lst:\n",
        "        index.append(lst.index(i,ind) + i)\n",
        "        ind+=1\n",
        "    return index\n",
        "\n",
        "add_index([1, 2, 3, 4, 5])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QoAGpi-nmlqd",
        "outputId": "90236c26-b687-43b9-b96f-9b3e5ef18135"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 3, 5, 7, 9]"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a function that takes the height and radius of a cone as arguments and returns the volume of the cone rounded to the nearest hundredth\n",
        "import math\n",
        "pi = math.pi\n",
        " \n",
        "# Function to calculate Volume of Cone\n",
        "def volume(r, h):\n",
        "    return (1 / 3) * pi * r * r * h\n",
        " \n",
        "# Function To Calculate Surface Area of Cone\n",
        "def surfacearea(r, s):\n",
        "    return pi * r * s + pi * r * r\n",
        " \n",
        "# Driver Code\n",
        "radius = float(5)\n",
        "height = float(12)\n",
        "slat_height = float(13)\n",
        "print( \"Volume Of Cone : \", volume(radius, height) )\n",
        "print( \"Surface Area Of Cone : \", surfacearea(radius, slat_height) )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CMt8FhmRmlr_",
        "outputId": "62266c68-d3e7-4471-d3b1-0e6c8055c85e"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Volume Of Cone :  314.15926535897927\n",
            "Surface Area Of Cone :  282.7433388230814\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Write a function that gives the number of dots with its corresponding triangle number of the sequence.\n",
        "# Function to find triangular number\n",
        "def triangular_series( n ):\n",
        "    j = 1\n",
        "    k = 1\n",
        "     \n",
        "    # For each iteration increase j\n",
        "    # by 1 and add it into k\n",
        "    for i in range(1, n + 1):\n",
        "        print(k, end = ' ')\n",
        "        j = j + 1 # Increasing j by 1\n",
        "         \n",
        "        # Add value of j into k and update k\n",
        "        k = k + j\n",
        "         \n",
        "# Driven Code\n",
        "n = 5\n",
        "triangular_series(n)\n",
        " \n",
        "# This code is contributed by \"S"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2dpPg34bpq3k",
        "outputId": "2e2879bf-c963-4e05-83ab-fb2496c1e4db"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 3 6 10 15 "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a function that takes a list of numbers between 1 and 10 (excluding one number) and returns the missing number.\n",
        "def missing_num(lst):\n",
        "    total = sum([x for x in range(11)])\n",
        "    sum_of_list = sum(lst)\n",
        "    return total - sum_of_list\n",
        "\n",
        "print(missing_num([1, 2, 3, 4, 6, 7, 8, 9, 10]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VQ4G-mwLpq4q",
        "outputId": "87299876-14ba-4076-cfc6-2a7295ab6e23"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n"
          ]
        }
      ]
    }
  ]
}